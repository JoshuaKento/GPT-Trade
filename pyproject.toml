[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "edgar-tools"
version = "0.1.0"
description = "Utilities for fetching SEC EDGAR filings"
requires-python = ">=3.9"
authors = [{name = "GPT-Trade"}]
license = "MIT"
readme = "README.md"
keywords = ["edgar", "sec", "filings", "finance", "data"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "requests>=2.28.0",
    "beautifulsoup4>=4.11.0",
    "boto3>=1.26.0",
    "aiohttp>=3.8.0",
    "tqdm>=4.64.0"
]

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.12.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.21.0",
    "autoflake>=2.2.0",
    "pyupgrade>=3.15.0",
    
    # Type checking
    "mypy>=1.8.0",
    "types-requests>=2.28.0",
    "types-boto3>=1.0.0",
    
    # Security
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    
    # Documentation
    "pydocstyle>=6.3.0",
    
    # Pre-commit
    "pre-commit>=3.6.0",
]
test = [
    # Testing framework
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    
    # Test utilities
    "coverage>=7.3.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "responses>=0.24.0",
    "moto>=4.2.0",  # AWS mocking
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]

[project.scripts]
fetch-10k = "scripts.fetch_10k_new:main"
list-files = "scripts.list_files_new:main"
companies = "scripts.companies:main"
monitor-edgar = "scripts.monitor_new:main"

[tool.setuptools.packages.find]
include = ["edgar*", "scripts*"]
exclude = ["tests*", "CLAUDEmd*", "config*", "manifests*"]

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["edgar", "scripts", "tests"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D100,D101,D102,D103,D104"
]
exclude = [
    ".git",
    "__pycache__",
    ".tox",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    ".venv",
    "venv"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "moto.*",
    "responses.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=edgar",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["edgar"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107"]
match_dir = "^(?!tests).*"
