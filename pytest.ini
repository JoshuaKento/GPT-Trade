[tool:pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=edgar
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=85
    --durations=10

# Test markers
markers =
    unit: Unit tests that test individual components in isolation
    integration: Integration tests that test component interactions
    slow: Tests that take a long time to run
    network: Tests that require network access (should be mocked in CI)

# Asyncio configuration
asyncio_mode = auto

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:unclosed:ResourceWarning

# Minimum Python version
minversion = 3.9

# Test timeout (in seconds)
timeout = 300

# Coverage configuration
[coverage:run]
source = edgar
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */migrations/*
    */settings/*
    manage.py
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml